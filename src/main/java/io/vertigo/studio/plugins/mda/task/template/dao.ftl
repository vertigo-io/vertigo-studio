<#import "macro_ao.ftl" as lib>
package ${dao.packageName};

import javax.inject.Inject;

<#if dao.options >
import java.util.Optional;
</#if>
import io.vertigo.core.lang.Generated;
<#if !dao.taskDefinitions.empty >
import io.vertigo.core.node.Home;
import io.vertigo.datamodel.task.metamodel.TaskDefinition;
import io.vertigo.datamodel.task.model.Task;
import io.vertigo.datamodel.task.model.TaskBuilder;
</#if>
<#if dao.keyConcept>
import io.vertigo.datamodel.structure.model.UID;
</#if>
import io.vertigo.datastore.entitystore.EntityStoreManager;
import io.vertigo.datastore.impl.dao.DAO;
import io.vertigo.datastore.impl.dao.StoreServices;
import io.vertigo.datamodel.smarttype.SmartTypeManager;
import io.vertigo.datamodel.task.TaskManager;
import ${dao.dtClassCanonicalName};

/**
 * This class is automatically generated.
 * DO NOT EDIT THIS FILE DIRECTLY.
 */
@Generated
public final class ${dao.classSimpleName} extends DAO<${dao.dtClassSimpleName}, ${dao.idFieldType}> implements StoreServices {

	/**
	 * Contructeur.
	 * @param entityStoreManager Manager de persistance
	 * @param taskManager Manager de Task
	 * @param smartTypeManager SmartTypeManager
	 */
	@Inject
	public ${dao.classSimpleName}(final EntityStoreManager entityStoreManager, final TaskManager taskManager, final SmartTypeManager smartTypeManager) {
		super(${dao.dtClassSimpleName}.class, entityStoreManager, taskManager, smartTypeManager);
	}

	<#if dao.keyConcept>
	/**
	 * Indique que le keyConcept associé à cette UID va être modifié.
	 * Techniquement cela interdit les opérations d'ecriture en concurrence
	 * et envoie un évenement de modification du keyConcept (à la fin de transaction eventuellement)
	 * @param UID UID du keyConcept modifié
	 * @return KeyConcept à modifier
	 */
	public ${dao.dtClassSimpleName} readOneForUpdate(final UID<${dao.dtClassSimpleName}> uid) {
		return entityStoreManager.readOneForUpdate(uid);
	}

	/**
	 * Indique que le keyConcept associé à cet id va être modifié.
	 * Techniquement cela interdit les opérations d'ecriture en concurrence
	 * et envoie un évenement de modification du keyConcept (à la fin de transaction eventuellement)
	 * @param id Clé du keyConcept modifié
	 * @return KeyConcept à modifier
	 */
	public ${dao.dtClassSimpleName} readOneForUpdate(final ${dao.idFieldType} id) {
		return readOneForUpdate(createDtObjectUID(id));
	}
	</#if>
	<#if !dao.taskDefinitions.empty>
	<@lib.generateBody dao.taskDefinitions/>  
	</#if>
}
