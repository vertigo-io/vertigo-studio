package ${packageName};

import java.util.Arrays;
import java.util.List;

import javax.inject.Inject;

import io.vertigo.commons.transaction.VTransactionManager;
import io.vertigo.core.lang.Generated;
import io.vertigo.core.node.component.Component;
import io.vertigo.core.node.definition.DefinitionProvider;
import io.vertigo.core.node.definition.DefinitionSpace;
import io.vertigo.core.node.definition.DefinitionSupplier;
import io.vertigo.core.util.ListBuilder;
import io.vertigo.datafactory.collections.metamodel.FacetDefinition.FacetOrder;
import io.vertigo.datafactory.collections.metamodel.FacetRangeDefinitionSupplier;
import io.vertigo.datafactory.collections.metamodel.FacetTermDefinitionSupplier;
import io.vertigo.datafactory.collections.metamodel.FacetedQueryDefinitionSupplier;
import io.vertigo.datafactory.collections.model.FacetedQueryResult;
import io.vertigo.datafactory.collections.model.SelectedFacetValues;
import io.vertigo.datafactory.search.SearchManager;
import io.vertigo.datafactory.search.metamodel.SearchIndexDefinition;
import io.vertigo.datafactory.search.metamodel.SearchIndexDefinitionSupplier;
import io.vertigo.datafactory.search.model.SearchQuery;
import io.vertigo.datafactory.search.model.SearchQueryBuilder;
import io.vertigo.datamodel.structure.model.DtListState;
import io.vertigo.datamodel.structure.model.UID;
<#if indexDtDefinition.classCanonicalName != dtDefinition.classCanonicalName >
import ${indexDtDefinition.classCanonicalName};
</#if>
import ${dtDefinition.classCanonicalName};


/**
 * This class is automatically generated.
 * DO NOT EDIT THIS FILE DIRECTLY.
 */
@Generated
public final class ${dtDefinition.classSimpleName}SearchClient implements Component, DefinitionProvider {

	private final SearchManager searchManager;
	private final VTransactionManager transactionManager;

	/**
	 * Contructeur.
	 * @param searchManager Search Manager
	 * @param transactionManager Transaction Manager
	 */
	@Inject
	public ${dtDefinition.classSimpleName}SearchClient(final SearchManager searchManager, final VTransactionManager transactionManager) {
		this.searchManager = searchManager;
		this.transactionManager = transactionManager;
	}

	<#list facetedQueryDefinitions as facetedQueryDefinition>
	/**
	 * Création d'une SearchQuery de type : ${facetedQueryDefinition.simpleName}.
	 * @param criteria Critères de recherche
	 * @param selectedFacetValues Liste des facettes sélectionnées à appliquer
	 * @return SearchQueryBuilder pour ce type de recherche
	 */	
	public SearchQueryBuilder createSearchQueryBuilder${facetedQueryDefinition.simpleName}(final ${facetedQueryDefinition.criteriaClassCanonicalName} criteria, final SelectedFacetValues selectedFacetValues) {
		return SearchQuery.builder("${facetedQueryDefinition.queryName}")
				.withCriteria(criteria)
				.withFacet(selectedFacetValues);
	}
	</#list>

	/**
	 * Récupération du résultat issu d'une requête.
	 * @param searchQuery critères initiaux
	 * @param listState Etat de la liste (tri et pagination)
	 * @return Résultat correspondant à la requête (de type ${indexDtDefinition.classSimpleName})
	 */
	public FacetedQueryResult<${indexDtDefinition.classSimpleName}, SearchQuery> loadList(final SearchQuery searchQuery, final DtListState listState) {
		final SearchIndexDefinition indexDefinition = searchManager.findFirstIndexDefinitionByKeyConcept(${dtDefinition.classSimpleName}.class);
		return searchManager.loadList(indexDefinition, searchQuery, listState);
	}

	/**
	 * Mark an entity as dirty. Index of these elements will be reindexed if Tx commited.
	 * Reindexation isn't synchrone, strategy is dependant of plugin's parameters.
	 *
	 * @param entityUID Key concept's UID
	 */
	public void markAsDirty(final UID<${dtDefinition.classSimpleName}> entityUID) {
		transactionManager.getCurrentTransaction().addAfterCompletion((final boolean txCommitted) -> {
			if (txCommitted) {// reindex only is tx successful
				searchManager.markAsDirty(Arrays.asList(entityUID));
			}
		});
	}

	/**
	 * Mark an entity as dirty. Index of these elements will be reindexed if Tx commited.
	 * Reindexation isn't synchrone, strategy is dependant of plugin's parameters.
	 *
	 * @param entity Key concept
	 */
	public void markAsDirty(final ${dtDefinition.classSimpleName} entity) {
		markAsDirty(UID.of(entity));
	}
	
	/** {@inheritDoc} */
	@Override
	public List<DefinitionSupplier> get(final DefinitionSpace definitionSpace) {
		return new ListBuilder<DefinitionSupplier>()
				//---
				// SearchIndexDefinition
				//-----
				.add(new SearchIndexDefinitionSupplier("${searchIndexDefinition.name}")
						.withIndexDtDefinition("${searchIndexDefinition.indexDtDefinition}")
						.withKeyConcept("${searchIndexDefinition.keyConceptDtDefinition}")						
						<#list searchIndexDefinition.copyToModels as copyTo>
						.withCopyToFields("${copyTo.to}", <#list copyTo.from as from>"${from}"<#sep>, </#list>)
						</#list>
						.withLoaderId("${searchIndexDefinition.loaderId}"))
							
				//---
				// FacetTermDefinition
				//-----
				<#list facetDefinitions as facetDefinition>
				.add(new Facet<#if facetDefinition.isRange()>Range<#else>Term</#if>DefinitionSupplier("${facetDefinition.name}")
						.withDtDefinition("${searchIndexDefinition.indexDtDefinition}")
						.withFieldName("${facetDefinition.fieldName}")
						.withLabel("${facetDefinition.label}")
						<#if facetDefinition.isMultiSelectable()>
						.withMultiSelectable()
						</#if>
						<#if facetDefinition.isRange()>
						<#list facetDefinition.facetValues as facetValue>
						.withRange("${facetValue.code}", "${facetValue.listFilter}", "${facetValue.label}")
						</#list>
						</#if>
						.withOrder(FacetOrder.${facetDefinition.order}))
				</#list>

				//---
				// FacetedQueryDefinition
				//-----
				<#list facetedQueryDefinitions as facetedQueryDefinition>
				.add(new FacetedQueryDefinitionSupplier("${facetedQueryDefinition.queryName}")
						<#list facetedQueryDefinition.facetDefinitions as facetDefinition>							
						.withFacet("${facetDefinition.name}")
						</#list>
						.withListFilterBuilderClass(${facetedQueryDefinition.listFilterClassName}.class)
						.withListFilterBuilderQuery("${facetedQueryDefinition.listFilterBuilderQuery}")
						.withCriteriaSmartType("${facetedQueryDefinition.criteriaSmartType}"))						
				</#list>
				
				.build();
	}
}
