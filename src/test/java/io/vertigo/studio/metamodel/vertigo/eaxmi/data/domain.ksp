package io.vertigo.dynamo.environment.data

/**** Domaines utilisés dans le modèle objet ****/

/** On teste la séparation alter ou  create*/
alter Domain DoActif {
    dataType : Boolean
}

create Domain DoActif {
    formatter : FmtActifInactif 
}


create Domain DoOuiNon {
    dataType : Boolean
    formatter : FmtOuiNon
}

create Domain DoCode {
    dataType : String
    formatter : FmtUpperCase
    constraint : [CkMaxLength30]
}

create Domain DoCodePostal {
    dataType : String
    formatter : FmtDefault
    constraint : [CkCodePostal]
}

create Domain DoDate {
    dataType : LocalDate
    formatter : FmtDate
}

/*
TODO Analyser l'intérêt d'un formatter spécifique pour les durées
*/
create Domain DoDuree {
    dataType : String
    formatter : FmtDefault
    constraint : [CkDuree]
}

create Domain DoEmail {
    dataType : String
    formatter : FmtDefault
    constraint : [CkEmail]
}


create Domain DoIdentifiant {
    dataType : Long
    formatter : FmtDefault
}


create Domain DoLibelleCourt {
    dataType : String
    formatter : FmtDefault
    constraint : [CkMaxLength40]
}

create Domain DoLibelle {
    dataType : String
    formatter : FmtDefault
    constraint : [CkMaxLength100]
}

create Domain DoLibelleLong {
    dataType : String
    formatter : FmtDefault
    constraint : [CkMaxLength250]
}

create Domain DoLogin {
    dataType : String
    formatter : FmtDefault
    constraint : [CkMaxLength30]
}

create Domain DoMontant {
    dataType : BigDecimal
    formatter : FmtDefault
    unit : "€"
}

create Domain DoQuantite {
    dataType : Long
    formatter : FmtDefault
}

create Domain DoPoids  {
    dataType : BigDecimal
    formatter : FmtDefault
}

create Domain DoOrdre {
    dataType : Long
    formatter : FmtDefault
}

create Domain DoTaux  {
    dataType : BigDecimal
    formatter : FmtTaux
    constraint : [CkMinValue0, CkMaxValue100]
}

create Domain DoTexte {
    dataType : String
    formatter : FmtDefault
    constraint : [CkMaxLength4000]
}

create Domain DoTelephone {
    dataType : String
    formatter : FmtDefault
    constraint : [CkTelephone]
}

create Domain DoPassword {
    dataType : String
    formatter : FmtDefault
}


/**************************************************************************************************/
/*                                          Gestion des formatters                                */
/**************************************************************************************************/

create Formatter FmtDefault {
    className : "io.vertigo.datamodel.impl.smarttype.formatter.FormatterDefault"
}

create Formatter FmtUpperCase {
    className : "io.vertigo.datamodel.impl.smarttype.formatter.FormatterString"
    args : "UPPER"
}

create Formatter FmtDate {
     className :"io.vertigo.datamodel.impl.smarttype.formatter.FormatterDate"
     args : "dd/MM/yyyy"
}

create Formatter FmtOuiNon {
      className :"io.vertigo.datamodel.impl.smarttype.formatter.FormatterBoolean"
      /*args : "<img src:'../static/images/icon/select_on.gif' alt:'oui'/>;<img src:'../static/images/icon/select_off.gif' alt:'non'/>";*/
      args : "Oui;Non"
}

create Formatter FmtActifInactif {
      className :"io.vertigo.datamodel.impl.smarttype.formatter.FormatterBoolean"
      /*args : "<img src:'../static/images/icon/select_on.gif' alt:'actif'/>;<img src:'../static/images/icon/select_off.gif' alt:'inactif'/>";*/
      args : "Actif;Inactif"
}


/*
Formatage avec deux chiffres maximum après la virgule.
Pas d'affichage de 0 après virgule si pas nécessaire (ex: 100 sera affiché sous la forme 100 et 100.00)
*/
create Formatter FmtTaux {
     className :"io.vertigo.datamodel.impl.smarttype.formatter.FormatterNumber"
     args : "#.##"
}



/**************************************************************************************************/
/*                                          Gestion des contraintes                               */
/**************************************************************************************************/

create Constraint CkUrn {
    className : "io.vertigo.datamodel.impl.smarttype.constraint.ConstraintRegex"
    args : "[A-Z0-9_]{3,40}([$][A-Z0-9_]{3,40})?"
}


create Constraint CkMaxLength30 {
    className: "io.vertigo.datamodel.impl.smarttype.constraint.ConstraintStringLength"
    args :"30"
}

create Constraint CkMaxLength40 {
    className: "io.vertigo.datamodel.impl.smarttype.constraint.ConstraintStringLength"
    args :"40"
}

create Constraint CkMaxLength50 {
    className: "io.vertigo.datamodel.impl.smarttype.constraint.ConstraintStringLength"
    args :"50"
}

create Constraint CkMaxLength100 {
    className: "io.vertigo.datamodel.impl.smarttype.constraint.ConstraintStringLength"
    args :"100"
}

create Constraint CkMaxLength250 {
    className: "io.vertigo.datamodel.impl.smarttype.constraint.ConstraintStringLength"
    args :"250"
}

create Constraint CkMaxLength4000 {
    className: "io.vertigo.datamodel.impl.smarttype.constraint.ConstraintStringLength"
    args :"4000"
}

create Constraint CkMinValue0 {
    className: "io.vertigo.datamodel.impl.smarttype.constraint.ConstraintNumberMinimum"
    args :"0"
}

create Constraint CkMaxValue100 {
    className: "io.vertigo.datamodel.impl.smarttype.constraint.ConstraintNumberMaximum"
    args :"100"
}

/*
Prise en compte uniquement des codes postaux français.
*/
create Constraint CkCodePostal  {
    className: "io.vertigo.datamodel.impl.smarttype.constraint.ConstraintRegex"
    args : "^[0-9]{5}$"
}

/*
Prise en compte uniquement du format de durée HH:MM.
*/ 
create Constraint CkDuree {
    className: "io.vertigo.datamodel.impl.smarttype.constraint.ConstraintRegex"
    args : "^([0-1][0-9]|[2][0-3]):([0-5][0-9])$"
}

create Constraint CkEmail {
    className: "io.vertigo.datamodel.impl.smarttype.constraint.ConstraintRegex"
    args : "^[_a-zA-Z0-9-]+(\.[_a-zA-Z0-9-]+)*@[a-zA-Z0-9-]+(\.[_a-zA-Z0-9-]+)*(\.[a-zA-Z0-9-]{2,3})+$"
    msg : "L'email n'est pas valide"
}

/*
Prise en compte des numéros de téléphones français sans le préfixe international.
Prise en compte des numéros de téléphones fixes (numéros commençant par 01, 02, 03, 04, 05, 08 ou 09) et protables (numéros commençant par 06 ou 07).
*/
create Constraint CkTelephone {
    className: "io.vertigo.datamodel.impl.smarttype.constraint.ConstraintRegex"
    args : "^0[0-9]{9}$"
}
